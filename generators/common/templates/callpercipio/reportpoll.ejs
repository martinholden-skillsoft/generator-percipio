  // Add Axios Retry
  // see https://github.com/JustinBeckwith/retry-axios
  axiosInstance.defaults.raxConfig = _.merge(
    {},
    {
      instance: axiosInstance,
      // You can detect when a retry is happening, and figure out how many
      // retry attempts have been made
      onRetryAttempt: (err) => {
        const raxcfg = rax.getConfig(err);
        const message = [];
        message.push(`CorrelationId: ${err.config.correlationid}.`);
        message.push(`${err.code}:${err.message}.`);
        message.push(`Retry attempt #${raxcfg.currentRetryAttempt}.`);

        logger.warn(`${message.join(' ')}`, {
          label: 'onRetryAttempt',
        });
      },
      // Override the decision making process on if you should retry
      shouldRetry: (err) => {
        const cfg = rax.getConfig(err);
        // ensure max retries is always respected
        if (cfg.currentRetryAttempt >= cfg.retry) {
          logger.warn(`CorrelationId: ${err.config.correlationid}. Maximum retries reached.`, {
            label: `shouldRetry`,
          });
          return false;
        }

        // ensure max retries for NO RESPONSE errors is always respected
        if (cfg.currentRetryAttempt >= cfg.noResponseRetries) {
          logger.warn(
            `CorrelationId: ${err.config.correlationid}. Maximum retries reached for No Response Errors.`,
            {
              label: `shouldRetry`,
            }
          );
          return false;
        }

        // Handle the request based on your other config options, e.g. `statusCodesToRetry`
        if (rax.shouldRetryRequest(err)) {
          return true;
        }
        logger.warn(`CorrelationId: ${err.config.correlationid}. None retryable error.`, {
          label: `shouldRetry`,
        });
        return false;
      },
    },
    options.rax
  );
  rax.attach(axiosInstance);
  callPercipio(options, axiosInstance)
    .then((response) => {
      // Poll for results.
    })
    .catch((err) => {
      logger.error(err, loggingOptions);
      logger.info(`End ${pjson.name} - v${pjson.version}`, loggingOptions);
    });